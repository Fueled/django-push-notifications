{"name":"Django-push-notifications","tagline":"A library for easily sending and configuring push notifications with ZeroPush and Urban Airship","body":"# Django Push Notifications\r\n\r\nThis package makes it easy to support Push notifications. It works together with third party services such as `ZeroPush`.\r\n\r\nYou can easily add permissions to push devices by chaining those devices to a notification setting. For registering a new push device you can add custom permissions.\r\n\r\n## Configuration\r\n\r\nFirst you have to add `push_notifications` to your installed apps:\r\n```python\r\n  INSTALLED_APPS = (\r\n    ...\r\n    'push_notifications',\r\n  )\r\n```\r\n\r\nTo setup the package you have to add a `DJANGO_PUSH_NOTIFICATIONS` into your settings:\r\n```python\r\ndef Settings(Configuration):\r\n  # ...\r\n  DJANGO_PUSH_NOTIFICATIONS = {\r\n      'SERVICE': 'push_notifications.services.zeropush.ZeroPushService',\r\n      'AUTH_TOKEN': '123123123'\r\n  }\r\n```\r\nThe `SERVICE` Key can be set to the type of service you use. In this example we use the `ZeroPushService`. With the `ZeroPush` Service we are required to add a `AUTH_TOKEN` to the `Configuration`.\r\n\r\n__Note__: Right now, only `ZeroPush` is available. More services will be available soon.\r\n\r\n## Usage\r\n\r\n### Register a device\r\nTo register a new device you can use the `register_push_device` method in `utils`:\r\n```python\r\nfrom push_notifications.utils from register_push_device\r\n\r\ntoken = \"<The device token>\"\r\nregister_push_device(user, token)\r\n```\r\n\r\nYou can also pass notification permissions directly to the `register_push_device` method:\r\n```python\r\nregister_push_device(user, token, ['likes', 'comments'])\r\n```\r\n\r\n### Add permissions\r\nTo add an notification permission to a push device you can use the `add_permission` method on the `device` object:\r\n```python\r\ndevice.add_permission('likes')\r\n```\r\n\r\nOr adding multiple permissions\r\n```python\r\ndevice.add_permissions(['likes', 'comments'])\r\n```\r\n\r\nAdd all the permission for the devices that the user owns.\r\n```python\r\nuser.push_devices.add_permissions(['likes', 'comments'])\r\n```\r\n\r\n### Remove permissions\r\nTo remove a notification permission you can use `remove_permission` method on the `device` object:\r\n```python\r\ndevice.remove_permissions('likes')\r\n```\r\n\r\nOr removing multiple permissions\r\n```python\r\ndevice.remove_permissions(['likes', 'comments'])\r\n```\r\n\r\nRemove all the permission for the devices that the user owns.\r\n```python\r\nuser.push_devices.remove_permissions(['likes', 'comments'])\r\n```\r\n\r\n### Send a notification\r\nTo send a notification to a certain permission group you can call `send_push_notification` in `utils`:\r\n```python\r\nfrom push_notifications import send_push_notification\r\nfrom datetime import timedelta\r\n\r\nsend_push_notification('likes', 'This is the message', sound=\"annoyingSound.mp3\",\r\n                                                       badge_number=1\r\n                                                       info={\r\n                                                        \"extra\": \"payload\",\r\n                                                        \"in\": \"notification\"\r\n                                                       },\r\n                                                       expiry=timedelta(days=30))\r\n```\r\n\r\n#### Description\r\n`send_push_notification(notify_type, message, **kwargs)`\r\n\r\n**kwargs**\r\n- `sound`: The sound that has to be played when sending the notification\r\n- `badge_number`: The badge_number that has to be displayed __(iOS Only)__\r\n- `info`: Extra payload that comes along the notification\r\n- `expiry`: The expiry of the notification __Accepts timedelta and datetime object__\r\n\r\n### Send a notification to one device\r\nTo send a notification to a specific device you can use the `send_push_notification` on the `device` object\r\n\r\n```python\r\ndevice.send_push_notification('likes', 'This is the message', sound=\"annoyingSound.mp3\",\r\n                                                              badge_number=1\r\n                                                              info={\r\n                                                                \"extra\": \"payload\",\r\n                                                                \"in\": \"notification\"\r\n                                                              },\r\n                                                              expiry=timedelta(days=30))\r\n```\r\nIt accepts the same parameters as the global `send_push_notification` in `utils`.\r\n\r\n### Send a notification to one user\r\nTo send a notification to a user and all its devices you can use the `send_push_notification` on the `push_devices` name in your user object:\r\n\r\n```python\r\nuser.push_devices.send_push_notification('likes', 'This is the message',\r\n                                         sound=\"annoyingSound.mp3\",\r\n                                         badge_number=1\r\n                                         info={\r\n                                           \"extra\": \"payload\",\r\n                                           \"in\": \"notification\"\r\n                                         },\r\n                                         expiry=timedelta(days=30))\r\n```\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}